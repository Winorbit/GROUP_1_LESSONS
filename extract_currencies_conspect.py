import requests

######################################
###### ЗАМЕТКИ ПО ЗАНЯТИЮ ############
######################################

"""
Напомнить ЗАЧЕМ нужны функции
НАСКОЛЬКО это актуальная штука. 
Вот эти констррукции будут использоваться вами вообще везде - малы, большие, и т.д.
Показать бибилиотеки - вот такие функции бывают, такие и такие.

Какой сложности она должна быть?
Например, почему бы нам не написать нашу функцию так (в одну функцию)?
Как всегда идем от вопросос. Зачем мы это делаем? Чтобы решить конкретную задачау. Решение ЛЮБОЙ задачаи в этом мире начинается с ее декомпозиции - разделения на множество мелких задач. Почему? Так проще. + маленькое удачное действие всгда легчЕ, чем боьшое, сложное и неудачно.
Так легче отлавливать ошибки, легче находить, где сбой, да и переисспользовать их можно.

Поэтому ваша функция должна слеовать ПРИНЦИПУ ЕДИНСТВЕНОЙ ОТВЕТСТВЕННОСТи, который применяется почти во всех уровнях програмирования.

Т.е ответ на вопрос ЧТО она делает должен быть один.

Здесь две лазейки - во первых, твет может быть довольно общим. Скажем ДОНОФУНКЦИЕВЫЙ скрипит извлекает данные по курсам.  Но это ж про ВАШЕ удобство, ребята. Так что лучше старайтесь миниммизировать.

Второй -насколько она простая? 
Имеет ли право на жизнь однострочная функция? 

В целом - да.  Здесь вопрос логики и здравого смысла. Если вам не кажется это бредом, то ок.

Дальше - насколько ОБЩЕЙ она должна быть? Скажем, вот у нас функция похода сюда.
А можно ли ее слеть некой универсальной функцией похода в интернет? Как бы, это и правда едная ответственнось - сходить и отдать ответ. Но в зависмости от типа данных, и т.д.

Ну, тут, опять же, ваша разумность. Нужно искать границу между переиспользованием и конкретной задачей.

КОД НЕ СТАТИЧЕН.
Вы будуете много раз его читать и пееписывать


ИСППОЛЬЗУЙТЕ РАЗНЫЕ ШАПКИ

ВЫ ВЫСТУПАЕТЕ ТАК ЖЕ, КАК И ТРЕНИРУЕТЕСЬ - поэтому никогда не подохдите с принципом. А, на проде норм будет. Вы ж не знаете как это - норм.

Шапка еле работающего - шапка хорошо работающего, но еще грязного кода - шапка заебись кода

Как их именовать? 
Камелкейс или подчеркивания? Ну, чаще ,конечно, юзают подчеркивания, но можно и камелкейсом. Как вам самим удбоней. ЕСЛИ В КОМАНДЕ - как команда. 

Важно ли, как ваш код выглядит? ДА. Потому ,что это вопрос читабельности.

Зачем эти соглашения? Это не жесткие требоания, это рамки- ПЕП8.

Итак:
- функция должна делать ОДНО действие, насколько оно атмарно, решать вам
- небольшая, желательно, не больше одного экрана, но, конечно, бывают и исключения, напримеР, когда у вас сложный алгоритм.
- имя это описание действия, желательно не больше трех-четырех слов
- минимм аргументов, желательно не больше трех, если их больше одного-двух, возможно, стоит подумать об именованны
- стоит подписывать тип и результат возвращения
- желательно, чтобы функция имела явный return, не считая специфических ситуаций
- Докстринга нужна для сложных функций, но ,вообще, читающему ваш еод должно быть все понятно из тела функции и ее названия.  Докстринг стоит использовать тогда .когда вы уже несколько аз попрбовали упростить функцию и поняли ,что это оптимальный результат.
- называть, если это ваш проекТ, можно каелкейсом или е через подчеркиания. Если чужой проект - то соблюдайте существующую стилистику.
- как размещать их в файлах? Вспомните принцип единой ответственнсти и примените его тут. Одн файл должен содержатть связанные смыслом функции.  Скажем, файл "авторизация", файл "запросы", файл "курсы валют", настройки.
- Как групировать их в папки. То же самое - бейте по смыслу. Чем боьше ваш проект, тем больше будет групп. Допустим, наш пример. Пр разрастании стоит создать папку courses, в ей файл с функциями, ходящими за курсами и настройки, __init__.
Дальше он может разрстись так, что вы отдельно вынесете папку со всем функциями с запросамИ, отдльено -курсы и т.д.

- Стоит ли вообще этим правилам следовать?  Да, потому, что вы выступаете так ,как тренируетесь, и ваш код в продакшене ,не вано, как у наемного работника или стартапера, будет таким же ,каким вы его пишете обычно. Не случится так ,что вы хуярите грязный код ,А потом резко стане писать хорошо.
- Функции стоит переписыватЬ, как и вообще весь код. В певую очередь напишите работающий вариант. Кивой, косой, нестабильный ,но  работющий.  Затем уже сделайте его стабильным, учитывающим ошибки, исключения. А затем превращайте в красивый код для пулреквеста.
- Перемены - единственная константа.

############################
##### ЗАДАЧА УРОКА #########
############################


Задача - сделать бота, который будет подсказывать нам курс валют по данным нацбанака Белки. 
Нас инеесует следующий алгоритм - ввели запрос вроде "Хочу узнать курс USD, EUR"  и в ответ получили текстовое сообщение.

Декомпозиция как основа любой разумной деятельности

Окей, это можно разбить на две части - собственно, работу с самим телеграмом, т.е отправку сообщения боту и получния ответа от него и сама программа, осуществляющая поиск, рассчети генерацию текста.

Бот просто принимает и отправляет сообщения ,следоватлеьно то униввесальная штука, так что займемся скриптом по рабтае с курсами.

Что нам нжно?
- Извлечь информацию о курсах в каком-то виде
- трансформировать в удобный нам вид
- создать из него текствое сообщение.



КУРС ПРОДАЖИ И ПОКУПКИ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
http://www.cbr.ru/scripts/XML_daily.asp?date_req=02/03/2002<Paste>

today_currencies_link = "https://www.nbrb.by/api/exrates/rates?periodicity=0"
"""


today_currencies_link = "https://www.nbrb.by/api/exrates/rates?periodicity=0"

def extract_current_currencies():
    req = requests.get(today_currencies_link)
    if req.status_code == 200:
        currencies = req.json()
        if currencies:
           return currencies
        else:
            print(f"Sorry, on some reasons currencies is {currencies}")
    else:
        print(f"Request to {today_currencies_link} was failed witth status {req.status_code}")

def filter_currs(currencies:list, *abrs):
    result = [curr for curr in currencies if curr["Cur_Abbreviation"] in abrs]
    return result
    pass

def prepare_currencies_message(requested_currs:list):
    message_template = "Курс валют в РБ на сегодня: "
    for curr in requested_currs:
        abbr = curr["Cur_Abbreviation"]
        currency = round(curr["Cur_OfficialRate"],2)
        scale = curr["Cur_Scale"]
        message_template += f"{currency} рублей за {scale} {abbr}, "
    return message_template
    pass

def request_current_courses(*requested_currs):
    current_currencies = extract_current_currencies()
    filtered_currs = filter_currs(current_currencies, *requested_currs)
    message = prepare_currencies_message(filtered_currs)
    return message
    pass

####################################
####   СТАРТУЕМ УРОК ЗДЕСЬ
###################################

def extract_currencies():
    req = requests.get(today_currencies_link)
    if req.status_code == 200:
       currencies = req.json()
       if currencies:
           return currencies
    else:
        print(f"Request to {today_currencies_link} was failed witth status {req.status_code}")
"""
Задача - сделать бота, который будет подсказывать нам курс валют по данным нацбанака Белки. 
Нас инеесует следующий алгоритм - ввели запрос вроде "Хочу узнать курс USD, EUR"  и в ответ получили текстовое сообщение.

Окей, это можно разбить на две части - собственно, работу с самим телеграмом, т.е отправку сообщения боту и получния ответа от него и сама программа, осуществляющая поиск, рассчети генерацию текста.

Бот просто принимает и отправляет сообщения ,следоватлеьно то униввесальная штука, так что займемся скриптом по рабтае с курсами.

Что нам нжно?
- Извлечь информацию о курсах в каком-то виде
- трансформировать в удобный нам вид
- создать из него текствое сообщение.



КУРС ПРОДАЖИ И ПОКУПКИ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
http://www.cbr.ru/scripts/XML_daily.asp?date_req=02/03/2002<Paste>
"""

# Итак, получается ,нам понадобяся следующие функции:

def extract_currencies():
    pass

def filter_currencies():
    pass

def create_message():
    pass

"""
И мы должны наполнить их содержанием. Наччнем с извлечения.
находится эта информация вот здесь, по ссылке - "https://www.nbrb.by/api/exrates/rates?periodicity=0"

Учитывая, что мы будем ее не раз использовать, лучше нам привзяать это значение к ссылке
"""
today_currencies_link = "https://www.nbrb.by/api/exrates/rates?periodicity=0"

# Окей, давайте сходим по этому аддресу из нашего питоновского скрипта
req = requests.get(today_currencies_link)

print(req)

"""
Так, хмм, все равно не совсем то, что нам нужно.
Вспомним, что мы посылаем ЗАПРОС и на него получаем ОТВЕТ, response
И этот респонс состоит из нескольких частей - статус, заголовки и тело.
Нас интерсует что?
Нет, не body, сначала нас интересует статус. Почему? Потому, что статус быстро говорит нам - удачен запрос или нет. И вот если удачен - тогда мы смотрим уже тело. 

После этого идем смотреть тело.
"""

req = requests.get(today_currencies_link)
if req.status_code == 200:
    print(req.json()


"""
Супер, вот это вот то, что надо!
Но! Вот только нам нужно, чтобы этот кусочек кода был переисползуемым. Зачит, пора запаковать это дело в функцию
"""

def extract_currencies():
    req = requests.get(today_currencies_link)
    currencies = req.json()
    return currencies

currs = extract_currencies()
print(currs)


"""
Супер, первый наш этап пройден! Мы получили большой кусок информации. Теперь наша задача его как-то отфильтровать
Как? А мы бдем искать по аббревиатуре, верно?
Соответственно, нам нужно взять те аббревиатуры, которые нас интересуют, и начать перебирать словари, из которых состои большой список. 
Затем сравнивать значение по ключу - если аббревитура входит в словарь, ты мы берем этот словарь, если нет - пропускаем.

Соответственно, нам нужно ответить на следующие вопросы
- как мы перебирем элементы?
- как мы их переберем в новую коробку?

- цикл фор, 
- класть в следующий список.

- а почему список? У нас же тупля есть, да и дикт.

Так, падажжы, а вот откуда эти аббревиатуры?
C чем же нам сравнивать
Агаа, давайте их на вход.
"""

def filter_currs(currencies:list, abbrs:list): 
    actual_data = []
    for x in currencies:
        if x["Curr"] in abbrs:
            actual_data += x
    return actual_data

# Окей, мы на вход подаем список. Но вот возникает воппрос - удобно ли это? 
# А вот теперь очень интересная штука. Давайте-ка мы вспомним про * и **


filtered_currs = filter_currencies()
print(filtered_currs)

"""
Так, супер, то есть мы извлекли данные, а затем написали функцию, которя фильтрут входящие данные по определнным парметрам.
Эту функцию фильтра мы используе для фильтрации извлеченных данных.

Теперь финальный этап - надо эту отфильтрованную информацию использовать для подстановки в шаблон и венуть сообщение, сгенерированное на основе этого шаблона.

Займемся функцией создания сообщения
"""

def create_message(currencies:list, *abrs):
    requested_currs = filter_currs(currencies, *abrs)
    message = "Курс валют в РБ на сегодня: "
    if currencies:
        for curr in requested_currs:
            abbr = curr["Cur_Abbreviation"]
            currency = round(curr["Cur_OfficialRate"],2)
            scale = curr["Cur_Scale"]
            message += f"{currency} рублей за {scale} {abbr}, "
        return message
"""
Но, парни, впомним про декомпозицию.Видите, у нас есть реквест прямо в функции. Т.е у нас идет и поход по адддресу и очистка. А нам куда правильнее будет сделать так, чтобы у нас каждая функция делала одно дело. Т.е лучше разобьем функцию создания сообщения на две - подготовку и, собственно, создание сообщения
"""

def prepare_currencies_message(requested_currs:list):
    message_template = "Курс валют в РБ на сегодня: "
    for curr in requested_currs:
        abbr = curr["Cur_Abbreviation"]
        currency = round(curr["Cur_OfficialRate"],2)
        scale = curr["Cur_Scale"]
        message_template += f"{currency} рублей за {scale} {abbr}, "
    return message_template
    pass

def request_current_courses(*requested_currs):
    current_currencies = extract_current_currencies()
    filtered_currs = filter_currs(current_currencies, *requested_currs)
    message = prepare_currencies_message(filtered_currs)
    return message
    pass




############################################
########## Завершение
############################################

"""
Окей, парни, теперь такой момент. Вот этот код продуктовый? Вообще нет. Дело в том, что мы учитываем только хэпи-пас, и у нас есть еще не изученный варинт исключений или просто как-то учитывать возможность того, что все пойдет не так. 
Гуд, ну, тогда давате добави такие штуки, как иф-элс в случае непредвиденного ответа от сервака
"""

"ИЗМЕНЕННАЯ"
def extract_current_currencies():
    req = requests.get(today_currencies_link)
    if req.status_code == 200:
        currencies = req.json()
        if currencies:
           return currencies
        else:
            print(f"Sorry, on some reasons currencies is {currencies}")
    else:
        print(f"Request to {today_currencies_link} was failed witth status {req.status_code}")

"ОСТАЛИСЬ ПРЕЖНИМИ"

def filter_currs(currencies:list, *abrs):
    result = [curr for curr in currencies if curr["Cur_Abbreviation"] in abrs]
    return result
    pass

def prepare_currencies_message(requested_currs:list):
    message_template = "Курс валют в РБ на сегодня: "
    for curr in requested_currs:
        abbr = curr["Cur_Abbreviation"]
        currency = round(curr["Cur_OfficialRate"],2)
        scale = curr["Cur_Scale"]
        message_template += f"{currency} рублей за {scale} {abbr}, "
    return message_template
    pass

def request_current_courses(*requested_currs):
    current_currencies = extract_current_currencies()
    filtered_currs = filter_currs(current_currencies, *requested_currs)
    message = prepare_currencies_message(filtered_currs)
    return message
    pass


"""
Супер, насколько подуктовый код? Вот сейчас - да.

- Смотрим пару примеров.
    - ПАРОЧКА РЕПОЗИТОРИЕВ ИЗ БИБИЛОТЕК ПИТОНА папка Python examples
- Люди почитают`
- Смотрим на мелочи - как названы функции, болшие они или маленькие, как разбиты на файлы и т.д
- В чем есть их штуки - эксепшены, напимер.

 ДЗ:
 - Регистрочувствителен (Проврить, мб пихуй?), Сделать так, чтобы введенные буквенные комбо првращались в верхний регистра
 - сделать так, чтобы осуществлялась проверка паттерна - каждый агумент состот ТОЛЬКО из трех символов
                                                         каждый из этих символов - буква
                                                         буква АНГЛИЙСКОГО алфавита
                                                         если результат нулевой - выводить сообщение

   - инструменты: in, len, .isalpha() https://www.geeksforgeeks.org/python-string-isalpha-application/
 
   - сделать так, чтобы был дефолтный  аргумент - **kwargs 


ССЫЛКИ:
   - хорошая шпаргалка - http://pythonicway.com/python-functions
   - неплохая шшпора по встроенным функциям, раве что примеры могут показаться сложноватыми - https://tproger.ru/translations/python-built-ins-worth-learning/
   - немного про args/kwargs https://codecamp.ru/documentation/python/2475/*args-and-**kwargs
   - и очень хороший мтериал про аргс/кваргс на английском https://realpython.com/python-kwargs-and-args/
   - материал на английском про функци, тольково и последовательно:  https://able.bio/rhett/python-functions-and-best-practices--78aclaa

 
"""

